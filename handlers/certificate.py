import logging
from aiogram import Router, F
from aiogram.types import (
    CallbackQuery,
    Message,
    FSInputFile,
    InputMediaPhoto,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
import kbds.services_kbd as keyboard
import information.description as service_text

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

certificates_router = Router()

IMAGE_FOLDER = "img/"

certificates = [
    "certificate1.jpg",
    "certificate2.jpg",
    "certificate3.jpg",
    "certificate4.jpg",
    "certificate5.jpg",
    "certificate6.jpg",
    "certificate7.jpg",
    "certificate8.jpg",
    "certificate9.jpg",
    "certificate10.jpg",
]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states: dict[int, dict] = {}


def get_certificate_keyboard(index: int) -> InlineKeyboardMarkup:
    keyboard_rows = []

    nav_buttons = []
    if index > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data="prev-certification"))
    if index < len(certificates) - 1:
        nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data="next-certification"))

    if nav_buttons:
        keyboard_rows.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    back_button = InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back-main")
    keyboard_rows.append([back_button])

    return InlineKeyboardMarkup(inline_keyboard=keyboard_rows)


@certificates_router.callback_query(F.data == 'certificat')
async def show_certification(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_states[user_id] = {"cert_index": 0}

    index = 0
    image_path = IMAGE_FOLDER + certificates[index]
    caption = f"<b>üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç {index + 1}/{len(certificates)} üìú</b>"

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        media = InputMediaPhoto(media=FSInputFile(image_path), caption=caption, parse_mode="HTML")
        await callback.message.edit_media(media=media, reply_markup=get_certificate_keyboard(index))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer_photo(
            photo=FSInputFile(image_path),
            caption=caption,
            reply_markup=get_certificate_keyboard(index),
            parse_mode="HTML"
        )
    
    await callback.answer()


@certificates_router.callback_query(F.data.in_({"next-certification", "prev-certification"}))
async def certification_button(callback: CallbackQuery):
    user_id = callback.from_user.id
    state = user_states.setdefault(user_id, {"cert_index": 0})
    index = state["cert_index"]

    if callback.data == "next-certification" and index < len(certificates) - 1:
        index += 1
    elif callback.data == "prev-certification" and index > 0:
        index -= 1

    state["cert_index"] = index

    image_path = IMAGE_FOLDER + certificates[index]
    caption = f"<b>üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç {index + 1}/{len(certificates)} üìú</b>"
    media = InputMediaPhoto(media=FSInputFile(image_path), caption=caption, parse_mode="HTML")

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_media(media=media, reply_markup=get_certificate_keyboard(index))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer_photo(
            photo=FSInputFile(image_path),
            caption=caption,
            reply_markup=get_certificate_keyboard(index),
            parse_mode="HTML"
        )

    await callback.answer()


@certificates_router.callback_query(F.data == 'back-main')
async def back_button(callback: CallbackQuery):
    welcome_text = service_text.welcome.format(user=callback.from_user.first_name)
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(text=welcome_text, reply_markup=keyboard.start_kbd)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.delete()
        except Exception as delete_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {delete_error}")
        await callback.message.answer(text=welcome_text, reply_markup=keyboard.start_kbd)
    
    await callback.answer()
